type Query {
    login(email: String!, password: String!): AuthPayload
    getCustomerByUserId(userid: ID!): Cliente

    findAllCliente: [Cliente]
    findClienteById(id: ID!): Cliente

    findAllRawMaterials(limit: Int, offset: Int): PaginatedRawMaterials!
    findRawMaterialById(id: ID!): RawMaterial

    findAllStore: [Store]
    findStoreById(id: ID!): Store

    findAllNotes(limit: Int, offset: Int): PaginatedNotes!
    findNoteById(id: ID!): Note

    findAllInventories: [Inventory]
    findInventoryById(id: ID!): Inventory

    getAllGarment: [Garment]
    getGarment(id: ID!): Garment!


    findByIdPedido(id: ID!): Pedido!
    findAllPedido(limit: Int!, offset: Int!): PaginatedOrders!
    getOrdersByCustomer(customerId: ID!): [Pedido]!
    #getOrderItem(id: ID!): OrderItem


}

type Mutation {


    register(username: String!, email: String!, password: String!,): User
    registerCliente(username: String!, email: String!, password: String!,firstName: String!, lastName: String!, ci: String!, birthDate: String!, sex: String!, telephones: [TelephoneInput]!): User


    createStore(name: String!, address: String!): Store
    updateStore(id: ID!, name: String, address: String): Store
    deleteStore(id: ID!): String

    createCliente(cliente: ClienteInput): Cliente
    updateCliente(id: ID!,cliente: ClienteInput): Cliente
    deleteCliente(id: ID!): String

    createRawMaterial(name: String!, unit: String!): RawMaterial
    updateRawMaterial(id: ID!, name: String, unit: String): RawMaterial
    deleteRawMaterial(id: ID!): String

    createNote(date: String!, type: String!, totalAmount: Float!, detailNotes: [DetailNoteInput]!, storeId: ID!): Note
    updateNote(id: ID!, date: String, type: String, totalAmount: Float, detailNotes: [DetailNoteInput], storeId: ID): Note
    deleteNote(id: ID!): String

    createInventory(quantity: Int!, rawMaterialId: ID!, storeId: ID!): Inventory
    updateInventory(id: ID!, quantity: Int, rawMaterialId: ID, storeId: ID): Inventory
    deleteInventory(id: ID!): String


    createPedido(pedido: PedidoInput!): Pedido!
    #crearPedido(customerId: ID!, orderDate: String!, status: String!, totalPrice: Float, items: [OrderItemInput]!): Order!
    updatePedido(id: ID!,pedido: PedidoInput!): Pedido!
    deletePedido(id: ID!): String!

    #createOrderItem(orderId: ID!, garmentId: ID!, quantity: Int!, price: Float!, status: String, images: [String]!): OrderItem!
    #updateOrderItem(id: ID!, orderId: ID, garmentId: ID, quantity: Int, price: Float, status: String, images: [String]): OrderItem!
    #deleteOrderItem(id: ID!): Boolean!

    createGarment(name: String!, description: String, basePrice: Float!, image: String!, stock: Int): Garment!
    updateGarment(id: ID!, name: String, description: String, basePrice: Float, image: String!, stock: Int): Garment!
    deleteGarment(id: ID!): Boolean!


    createOrderChange(orderId: ID!, changeDate: String!, description: String, requestedBy: String, status: String!): OrderChange!
    updateOrderChange(id: ID!, orderId: ID, changeDate: String, description: String, requestedBy: String, status: String): OrderChange!
    deleteOrderChange(id: ID!): Boolean!



    seedData: String
}


type PaginatedOrders {
    items: [Pedido]!
    total: Int!
}



type Pedido {
    id: ID!
    customerId: ID!
    orderDate: String!
    status: String!
    totalPrice: Float
    creadoen: String
    actualizadoen: String
    orderItems: [OrderItem]!
}



input PedidoInput {
    customerId: ID!
    orderDate: String!
    status: String!
    totalPrice: Float
    orderItems: [OrderItemInput]!
}




type OrderItem {
    quantity: Int!
    price: Float!
    descripcion: String
    image:String
}

input OrderItemInput {
    quantity: Int!
    price: Float!
    descripcion: String
    image:String
}

type Garment {
    id: ID!
    name: String!
    description: String
    basePrice: Float!
    stock: Int
    image: String
}



type OrderChange {
    id: ID!
    orderId: ID!
    changeDate: String!
    description: String
    requestedBy: String
    status: String
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    username: String!
    email: String!
    password: String!
    userid: ID!
}

type PaginatedRawMaterials {
    items: [RawMaterial]
    total: Int
}

type PaginatedNotes {
    items: [Note]
    total: Int
}


type PaginatedStore {
    items: [Store]
    total: Int
}



type RawMaterial {
    id: ID
    name: String
    unit: String
}

type Store {
    id: ID
    name: String
    address: String
}

type Cliente {
    id: ID
    firstName: String
    lastName: String
    ci: String
    birthDate: String
    sex: String
    telephones: [Telephone]
    userid:String
}

input  ClienteInput {
    firstName: String
    lastName: String
    ci: String
    sex: String
    birthDate: String
    telephones: [TelephoneInput]
}





type Telephone {
    number: String
    type: String
}

type DetailNote {
    quantity: Int
    price: Float
    rawMaterialId: ID!
}

type Note {
    id: ID
    date: String
    type: String
    totalAmount: Float
    detailNotes: [DetailNote]
    storeId: ID!
}

type Inventory {
    id: ID
    quantity: Int
    rawMaterialId: ID!
    storeId: ID!
}

input DetailNoteInput {
    quantity: Int
    price: Float
    rawMaterialId: ID!
}

input TelephoneInput {
    number: String
    type: String
}

